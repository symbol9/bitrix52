import logging

from aiogram import Bot
from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, default_state, State
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import Message, CallbackQuery
from redis.asyncio.client import Redis

from config.config import load_config
from keyboards.keyboards import (phone_kb, fill_form_kb, cancel_btn_kb)
from lexicon.lexicon import LEXICON
from work_with_leads.add_lead import create_lead

logger = logging.getLogger(__name__)

config = load_config()

redis = Redis(host='localhost')

storage = RedisStorage(redis=redis)

webhook_url = config.webhooks.webhook
webhook_url2 = config.webhooks.webhook2


async def lead_data_f(redis):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
    name = await redis.get('lead_name')
    phone_number = await redis.get('lead_phone_number')
    email = await redis.get('lead_email')
    message = await redis.get('lead_message')

    # –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
    lead_data = {
        'fields': {
            "NAME": name,
            "STATUS_ID": "NEW",
            "OPENED": "Y",
            "ASSIGNED_BY_ID": 1,
            "PHONE": [{"VALUE": phone_number,
                       "VALUE_TYPE": "WORK"}],
            "EMAIL": [{"VALUE": email,
                       "VALUE_TYPE": "WORK"}],
            "COMMENTS": message
        },
        'params': {
            "REGISTER_SONET_EVENT": "Y"
        }
    }
    return lead_data


def convert_bytes_to_str(data):
    for key, value in data.items():
        if isinstance(value, bytes):
            data[key] = value.decode()
        elif isinstance(value, dict):
            convert_bytes_to_str(value)
        elif isinstance(value, list):
            for item in value:
                convert_bytes_to_str(item)

    return data


bot = Bot(token=config.tg_bot.token)
router = Router()


class FSMFillForm(StatesGroup):
    fill_name = State()
    fill_phone_number = State()
    fill_email = State()
    fill_message = State()


@router.message(CommandStart(), StateFilter(default_state))
async def start_command(message: Message):
    user_id = message.from_user.id

    with open('ids.txt', 'r+') as file:
        existing_ids = file.read().splitlines()
        if str(user_id) not in existing_ids:
            await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n'
                                      f'–Ø - –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stroika –∏ —è'
                                      f' –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n'
                                      f'–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—é ***,'
                                      f' –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º –∑–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π,',
                                 reply_markup=fill_form_kb())
            await message.answer('–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å - –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ')
            photo = 'https://avatars.mds.yandex.net/get-images-cbir/2203007/cROjPWcVCuSiB56otJBaig936/ocr'
            await bot.send_photo(chat_id=message.from_user.id, photo=photo)

        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                                 f"–Ø —Ç–≤–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø—Ä–∞—à–∏–≤–∞–π –≤—Å–µ —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏,"
                                 f" —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–æ—Ç–≤–µ—Ç–∏—Ç—å!")


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìù', StateFilter(default_state))
async def fillform_command(message: Message, state: FSMContext):
    keyboard = phone_kb()
    cancel_keyboard = cancel_btn_kb()
    await message.answer(text=LEXICON['fillform'],
                         reply_markup=keyboard)
    await message.answer(text=LEXICON['cancel'],
                         reply_markup=cancel_keyboard)
    await state.set_state(FSMFillForm.fill_phone_number)


@router.message(F.contact, StateFilter(FSMFillForm.fill_phone_number))
async def filling_phone_number(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    await redis.set('lead_phone_number', phone_number)
    cancel_keyboard = cancel_btn_kb()
    await message.answer(text=LEXICON['phone_number_filled'],
                         reply_markup=cancel_keyboard)
    await state.set_state(FSMFillForm.fill_name)


@router.callback_query(F.data == 'cancel_fill_form_pressed', StateFilter(FSMFillForm.fill_phone_number))
async def cancel_fill_form_pressed(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(LEXICON['cancel_filling'])
    await state.clear()


@router.message(StateFilter(FSMFillForm.fill_phone_number))
async def filling_phone_number_error(message: Message):
    await message.answer(LEXICON['filling_phone_number_error'])


@router.message(StateFilter(FSMFillForm.fill_name))
async def process_name(message: Message, state: FSMContext):
    await redis.set('lead_name', message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(FSMFillForm.fill_email)


@router.message(StateFilter(FSMFillForm.fill_email), lambda x: '@' in x.text)
async def filling_mail(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await redis.set('lead_email', message.text)
    await message.answer(text=LEXICON['email_filled'])
    await state.set_state(FSMFillForm.fill_message)


@router.callback_query(F.data == 'cancel_fill_form_pressed', StateFilter(FSMFillForm.fill_email))
async def cancel_fill_form_pressed(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(LEXICON['cancel_filling'])
    await state.clear()


@router.message(StateFilter(FSMFillForm.fill_email))
async def filling_mail_error(message: Message):
    await message.answer(LEXICON['filling_mail_error'])


@router.message(StateFilter(FSMFillForm.fill_message))
async def process_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    with open('ids.txt', 'r+') as file:
        file.write(f'{str(user_id)}\n')

    await redis.set('lead_message', message.text)
    data = await lead_data_f(redis)
    new_data = convert_bytes_to_str(data)
    logger.info(msg=new_data)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ (–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é create_lead)
    await create_lead(webhook_url, new_data)
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
    await redis.delete('lead_name', 'lead_phone_number', 'lead_email', 'lead_message')
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                         "–ù–∞ —É–∫–∞–∑–∞–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏,"
                         "–ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ @Openai_stroika_bot")
